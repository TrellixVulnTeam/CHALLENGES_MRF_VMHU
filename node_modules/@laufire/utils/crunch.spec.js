"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _crunch = require("./crunch");

var _collection = require("./collection");

/* Tested */

/* Helpers */
var sum = function sum() {
  for (var _len = arguments.length, numbers = new Array(_len), _key = 0; _key < _len; _key++) {
    numbers[_key] = arguments[_key];
  }

  return numbers.reduce(function (t, c) {
    return t + c;
  }, 0);
};
/* Spec */


describe('Crunch', function () {
  /* Mocks and Stubs */
  var elm1 = (0, _collection.secure)({
    a: 1,
    b: 2
  });
  var elm2 = (0, _collection.secure)({
    a: 1,
    b: 3
  });
  var arr = (0, _collection.secure)([elm1, elm2]);
  var obj = (0, _collection.secure)((0, _collection.dict)(arr));
  test('index builds and index the given collection' + ' on the given keys of the children to help with retrieval', function () {
    var expected = {
      1: {
        2: elm1,
        3: elm2
      }
    };
    var indexedFromArr = (0, _crunch.index)(arr, 'a', 'b');
    var indexedFromObj = (0, _crunch.index)(obj, 'a', 'b');
    expect(indexedFromArr).toEqual(expected);
    expect(indexedFromObj).toEqual(expected);
  });
  test('summarize summarizes the given collection' + ' and builds an index on the given keys', function () {
    var summarizer = function summarizer(item) {
      return sum.apply(void 0, (0, _toConsumableArray2["default"])((0, _collection.values)(item)));
    };

    var expected = {
      1: {
        2: 3,
        3: 4
      }
    };
    var summarizedFromArr = (0, _crunch.summarize)(arr, summarizer, 'a', 'b');
    var summarizedFromObj = (0, _crunch.summarize)(obj, summarizer, 'a', 'b');
    expect(summarizedFromArr).toEqual(expected);
    expect(summarizedFromObj).toEqual(expected);
  });
  test('descend descends into the given collection' + ' upto the given level and executes the given process' + ' and returns a new collection', function () {
    var process = function process(num) {
      return num + 1;
    };

    var expectedFromArr = [{
      a: 2,
      b: 3
    }, {
      a: 2,
      b: 4
    }];
    var expectedFromObj = (0, _collection.dict)(expectedFromArr);
    var gotFromArr = (0, _crunch.descend)(arr, process, 1);
    var gotFromObj = (0, _crunch.descend)(obj, process, 1);
    expect(gotFromArr).toEqual(expectedFromArr);
    expect(gotFromObj).toEqual(expectedFromObj);
  });
});