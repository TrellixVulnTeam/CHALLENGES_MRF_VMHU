"use strict";

var _partials = require("./partials");

test('translate returns a partial to access values of collections', function () {
  var map = {
    a: 1
  };
  var translator = (0, _partials.translate)(map);
  expect(translator('a')).toEqual(1);
});
describe('partial returns a partially provisioned function, ' + 'which could be called with remaining data.', function () {
  test('arrays are used for positional arguments', function () {
    var sum = function sum(a, b) {
      return a + b;
    };

    var withoutB = (0, _partials.partial)(sum, [1]);
    var withoutA = (0, _partials.partial)(sum, [undefined, 2]);
    expect(withoutB(3)).toEqual(4);
    expect(withoutA(1)).toEqual(3);
  });
  test('objects are used for named arguments', function () {
    var sum = function sum(_ref) {
      var a = _ref.a,
          b = _ref.b;
      return a + b;
    };

    var simple = (0, _partials.partial)(sum, {
      a: 1
    });
    var overridden = (0, _partials.partial)(sum, {
      a: 2
    });
    expect(simple({
      b: 2
    })).toEqual(3);
    expect(overridden({
      a: 1,
      b: 2
    })).toEqual(3);
  });
});