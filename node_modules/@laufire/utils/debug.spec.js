"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _debug = require("./debug");

beforeEach(function () {
  jest.clearAllMocks();
});
describe('peek - a drop in console.log replacement with better devEx', function () {
  // eslint-disable-next-line no-console
  console.log = jest.fn();
  test('peek logs a value to the console and returns the same value.', function () {
    var val = 1;
    var ret = (0, _debug.peek)(val);
    expect(ret).toBe(val); // eslint-disable-next-line no-console

    expect(console.log).toHaveBeenCalledWith(val);
  });
  test('peek supports an optional label.', function () {
    var val = 1;
    var label = 'someLabel';
    var ret = (0, _debug.peek)(val, label); // eslint-disable-next-line no-console

    expect(console.log).toHaveBeenCalledWith(label, val);
  });
});
describe('pretty - returns the pretty JSON of the given value', function () {
  JSON.stringify = jest.fn();
  test('pretty calls the stringify with the given value and indent', function () {
    var value = Symbol();
    var indent = '    ';
    (0, _debug.pretty)(value, indent);
    expect(JSON.stringify).toHaveBeenCalledWith(value, null, indent);
  });
  test('indent defaults to tab', function () {
    var value = Symbol();
    (0, _debug.pretty)(value);
    expect(JSON.stringify).toHaveBeenCalledWith(value, null, '\t');
  });
});
test('sleep stalls the flow for 1000ms by default.', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  var startedAt, resumedAt;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          startedAt = performance.now();
          _context.next = 3;
          return (0, _debug.sleep)();

        case 3:
          resumedAt = performance.now();
          expect(resumedAt - startedAt >= 1000).toBe(true);
          expect(resumedAt - startedAt < 1100).toBe(true);

        case 6:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));