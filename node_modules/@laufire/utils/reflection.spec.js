"use strict";

var _collection = require("./collection");

var _reflection = require("./reflection");

/* Tested */
describe('Reflection', function () {
  /* Mocks and Stubs */
  var obj = {};
  var arr = [];

  var fn = function fn() {};
  /* Tests */


  test('constructorName returns the constructor name' + ' of the given value', function () {
    var expectations = {
      Object: obj,
      Array: arr,
      Function: fn,
      String: '',
      Number: 1,
      Date: new Date(),
      fn: new fn()
    };
    (0, _collection.map)(expectations, function (value, expectation) {
      return expect((0, _reflection.constructorName)(value)).toEqual(expectation);
    });
    [null, undefined].forEach(function (value) {
      return expect((0, _reflection.constructorName)(value)).toEqual(undefined);
    });
  });
  test('inferType infers the type of the given value', function () {
    expect((0, _reflection.inferType)(obj)).toEqual('object');
    expect((0, _reflection.inferType)(1)).toEqual('number');
    expect((0, _reflection.inferType)(null)).toEqual('null');
    expect((0, _reflection.inferType)(undefined)).toEqual('undefined');
  });
  test('isCollection is an alias for isIterable', function () {
    expect(_reflection.isCollection).toEqual(_reflection.isIterable);
  });
  test('isIterable returns true only when the given value' + ' is an Array or an Object', function () {
    expect((0, _reflection.isIterable)(obj)).toEqual(true);
    expect((0, _reflection.isIterable)(arr)).toEqual(true);
    expect((0, _reflection.isIterable)(fn)).toEqual(false);
  });
  test('isFunction returns true only when the given value' + ' is a Function', function () {
    expect((0, _reflection.isFunction)(obj)).toEqual(false);
    expect((0, _reflection.isFunction)(fn)).toEqual(true);
  });
  test('isDict returns true only when the given value' + ' is an Object', function () {
    expect((0, _reflection.isDict)(obj)).toEqual(true);
    expect((0, _reflection.isDict)(arr)).toEqual(false);
  });
  test('isObject returns true only when the given value' + ' is an Objectish', function () {
    expect((0, _reflection.isObject)(obj)).toEqual(true);
    expect((0, _reflection.isObject)(new fn())).toEqual(true);
    expect((0, _reflection.isObject)(arr)).toEqual(false);
  });
  test('isDefined returns false only when the given value' + ' is undefined', function () {
    expect((0, _reflection.isDefined)(undefined)).toEqual(false);
    expect((0, _reflection.isDefined)(obj)).toEqual(true);
  });
});