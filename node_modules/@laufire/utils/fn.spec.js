"use strict";

var _fn = require("./fn");

var _collection = require("./collection");

/* Tested */

/* Helpers */
test('cache caches the given function based on parameters till the next call' + ' with a new set of args', function () {
  var testCache = function testCache(qualifier, callCount) {
    var fn = jest.fn(function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args;
    });
    var cachedFn = (0, _fn.cache)(fn, qualifier);
    var array = [1, 2];
    var number = 1;
    var result = cachedFn(array, number);
    expect(cachedFn(array, number)).toEqual(result);
    expect(fn.mock.calls.length).toEqual(1);
    cachedFn(array, number + 1);
    cachedFn(array.slice(), number + 1);
    expect(fn.mock.calls.length).toEqual(callCount);
  };

  testCache(undefined, 3);
  testCache(_collection.equals, 2);
});
test('value extracts the value from the given function or variable', function () {
  var val = Symbol();
  expect((0, _fn.value)(val)).toBe(val);
  expect((0, _fn.value)(function () {
    return val;
  })).toBe(val);
});