"use strict";

var _sorters = require("./sorters");

var _collection = require("./collection");

var _lib = require("./lib");

/* Tested */

/* Helpers */

/* Spec */
describe('Sorters', function () {
  /* Mocks and Stubs */
  var array = (0, _collection.secure)((0, _collection.range)(1, 100).concat(100));
  var reversed = (0, _collection.secure)(array.slice().reverse());
  var shuffled = (0, _collection.secure)((0, _collection.shuffle)(array));
  var objArray = (0, _collection.secure)(array.map(function (i) {
    return {
      prop: i
    };
  }));
  var objArrayShuffled = (0, _collection.secure)(shuffled.map(function (i) {
    return {
      prop: i
    };
  }));
  /* Tests */

  test('ascending sorts the given collection in ascending order.', function () {
    expect((0, _collection.sort)(array, _sorters.ascending)).toEqual(array);
  });
  test('descending sorts the given collection in descending order.', function () {
    expect((0, _collection.sort)(shuffled, _sorters.descending)).toEqual(reversed);
  });
  test('existing preserves the existing order of the given collection.', function () {
    expect((0, _collection.sort)(shuffled, _sorters.existing)).toEqual(shuffled);
  });
  test('reverse reverses the given collection.', function () {
    expect((0, _collection.sort)(shuffled, _sorters.reverse)).toEqual(shuffled.slice().reverse());
  });
  test('onProp sorts the given collection with the given sorter' + ' on a given property.', function () {
    expect((0, _collection.sort)(objArrayShuffled, (0, _sorters.onProp)('prop', _sorters.ascending))).toEqual(objArray);
  });
  describe('compile helps in sorting collection of collections.', function () {
    var data = [{
      a: 1,
      b: 2
    }, {
      a: 1,
      b: 1
    }, {
      a: 0,
      b: 3
    }, {
      a: 1,
      b: 1
    }];
    test('compile works with multiple props, with descending priority.', function () {
      var config = {
        a: 'ascending',
        b: 'descending'
      };
      var expected = (0, _collection.translate)([2, 0, 1, 3], data);
      var sorted = (0, _collection.sort)(data, (0, _sorters.compile)(config));
      expect(sorted).toEqual(expected);
    });
    test('compile supports custom grammars.', function () {
      var grammar = {
        descending: _sorters.ascending
      };
      var config = {
        a: 'ascending',
        b: 'descending'
      };
      var expected = (0, _collection.translate)([2, 1, 3, 0], data);
      var sorted = (0, _collection.sort)(data, (0, _sorters.compile)(config, grammar));
      expect(sorted).toEqual(expected);
    });
    test('compile works with two dimensional arrays.', function () {
      var config = ['ascending', 'descending'];
      var arrData = (0, _collection.map)(data, _lib.values);
      var expected = (0, _collection.translate)([2, 0, 1, 3], arrData);
      var sorted = (0, _collection.sort)(arrData, (0, _sorters.compile)(config));
      expect(sorted).toEqual(expected);
    });
  });
});