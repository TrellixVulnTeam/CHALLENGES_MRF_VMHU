"use strict";

var _reducers = require("./reducers");

var _collection = require("./collection");

var _lib = require("./lib");

var _helpers = require("../test/helpers");

/* Tested */

/* Helpers */

/* Spec */
describe('Reducers', function () {
  /* Mocks and Stubs */
  var array = (0, _collection.secure)((0, _lib.values)(_helpers.obj));
  test('sum sums the given candidates.', function () {
    expect((0, _collection.reduce)(_helpers.obj, _reducers.sum, 0)).toEqual(6);
    expect((0, _collection.reduce)(array, _reducers.sum, 0)).toEqual(6);
  });
  test('product multiples the given candidates.', function () {
    expect((0, _collection.reduce)(_helpers.obj, _reducers.product, 1)).toEqual(6);
    expect((0, _collection.reduce)(array, _reducers.product, 1)).toEqual(6);
  });
  test('avg computes the average of the given candidates.', function () {
    expect((0, _collection.reduce)(_helpers.obj, _reducers.avg, 0)).toEqual(2);
    expect((0, _collection.reduce)(array, _reducers.avg, 0)).toEqual(2);
  });
  test('length returns the length of the given collection.', function () {
    expect((0, _collection.reduce)(_helpers.obj, _reducers.len, 0)).toEqual(3);
    expect((0, _collection.reduce)(array, _reducers.len, 0)).toEqual(3);
  });
  test('count returns the number of occurrences of the given counted' + 'among the  given candidates.', function () {
    expect((0, _collection.reduce)(_helpers.obj, (0, _reducers.count)(1), 0)).toEqual(1);
    expect((0, _collection.reduce)(array, (0, _reducers.count)(0), 0)).toEqual(0);
  });
  test('min finds the smallest of the given candidates.', function () {
    expect((0, _collection.reduce)(_helpers.obj, _reducers.min)).toEqual(1);
    expect((0, _collection.reduce)(array, _reducers.min, 0)).toEqual(0);
  });
  test('max finds the largest of the given candidates.', function () {
    expect((0, _collection.reduce)(_helpers.obj, _reducers.max, 100)).toEqual(100);
    expect((0, _collection.reduce)(array, _reducers.max)).toEqual(3);
  });
  test('reducer derives reducers from relevant collection  functions.', function () {
    expect((0, _collection.reduce)([_helpers.obj, _helpers.extension], (0, _reducers.reducer)(_collection.merge), {})).toEqual(_helpers.extended);
  });
});